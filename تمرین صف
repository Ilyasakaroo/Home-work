class Queue:
    def init(self, capacity):
        self.capacity = capacity
        self.elements = [None] * capacity
        self.count = 0
        self.head_index = 0

    def enqueue(self, value):
        if self.is_full():
            raise Exception("Queue is full")
        enqueue_index = (self.head_index + self.count) % self.capacity
        self.elements[enqueue_index] = value
        self.count += 1

    def dequeue(self):
        if self.is_empty():
            raise Exception("Queue is empty")
        dequeued_value = self.elements[self.head_index]
        self.head_index = (self.head_index + 1) % self.capacity
        self.count -= 1
        return dequeued_value

    def peek(self):
        if self.is_empty():
            raise Exception("Queue is empty")
        return self.elements[self.head_index]

    def is_empty(self):
        return self.count == 0

    def current_size(self):
        return self.count

    def is_full(self):
        return self.count == self.capacity

    def get_element_at(self, position):
        if position < 0 or position >= self.count:
            return "Index out of bounds"
        actual_position = (self.head_index + position) % self.capacity
        return self.elements[actual_position]
